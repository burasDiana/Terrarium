//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UDPReceiver.TempWebserviceCloud {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TemperatureLog", Namespace="http://schemas.datacontract.org/2004/07/soap")]
    [System.SerializableAttribute()]
    public partial class TemperatureLog : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TemperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TimestampField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Temperature {
            get {
                return this.TemperatureField;
            }
            set {
                if ((this.TemperatureField.Equals(value) != true)) {
                    this.TemperatureField = value;
                    this.RaisePropertyChanged("Temperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Timestamp {
            get {
                return this.TimestampField;
            }
            set {
                if ((object.ReferenceEquals(this.TimestampField, value) != true)) {
                    this.TimestampField = value;
                    this.RaisePropertyChanged("Timestamp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TempWebserviceCloud.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllData", ReplyAction="http://tempuri.org/IService1/GetAllDataResponse")]
        UDPReceiver.TempWebserviceCloud.TemperatureLog[] GetAllData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllData", ReplyAction="http://tempuri.org/IService1/GetAllDataResponse")]
        System.Threading.Tasks.Task<UDPReceiver.TempWebserviceCloud.TemperatureLog[]> GetAllDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddData", ReplyAction="http://tempuri.org/IService1/AddDataResponse")]
        void AddData(UDPReceiver.TempWebserviceCloud.TemperatureLog data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddData", ReplyAction="http://tempuri.org/IService1/AddDataResponse")]
        System.Threading.Tasks.Task AddDataAsync(UDPReceiver.TempWebserviceCloud.TemperatureLog data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataFrom", ReplyAction="http://tempuri.org/IService1/GetDataFromResponse")]
        UDPReceiver.TempWebserviceCloud.TemperatureLog[] GetDataFrom(string fromTimestamp, string toTimestamp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataFrom", ReplyAction="http://tempuri.org/IService1/GetDataFromResponse")]
        System.Threading.Tasks.Task<UDPReceiver.TempWebserviceCloud.TemperatureLog[]> GetDataFromAsync(string fromTimestamp, string toTimestamp);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : UDPReceiver.TempWebserviceCloud.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<UDPReceiver.TempWebserviceCloud.IService1>, UDPReceiver.TempWebserviceCloud.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public UDPReceiver.TempWebserviceCloud.TemperatureLog[] GetAllData() {
            return base.Channel.GetAllData();
        }
        
        public System.Threading.Tasks.Task<UDPReceiver.TempWebserviceCloud.TemperatureLog[]> GetAllDataAsync() {
            return base.Channel.GetAllDataAsync();
        }
        
        public void AddData(UDPReceiver.TempWebserviceCloud.TemperatureLog data) {
            base.Channel.AddData(data);
        }
        
        public System.Threading.Tasks.Task AddDataAsync(UDPReceiver.TempWebserviceCloud.TemperatureLog data) {
            return base.Channel.AddDataAsync(data);
        }
        
        public UDPReceiver.TempWebserviceCloud.TemperatureLog[] GetDataFrom(string fromTimestamp, string toTimestamp) {
            return base.Channel.GetDataFrom(fromTimestamp, toTimestamp);
        }
        
        public System.Threading.Tasks.Task<UDPReceiver.TempWebserviceCloud.TemperatureLog[]> GetDataFromAsync(string fromTimestamp, string toTimestamp) {
            return base.Channel.GetDataFromAsync(fromTimestamp, toTimestamp);
        }
    }
}
